// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("MIGRATION_DATABASE_URL")
}

model Users {
  id         String    @id @default(uuid())
  name       String    @db.VarChar(255)
  document   String    @unique @db.VarChar(14)
  email      String    @unique @db.VarChar(100)
  password   String    @db.VarChar(100)
  created_at DateTime  @default(now()) @db.Timestamptz()
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamptz()
  Trainers   Trainers?
  Students   Students?
}

model Trainers {
  trainer_id       String             @id @default(uuid())
  userId           Users              @relation(fields: [user_id], references: [id])
  user_id          String             @unique
  Trainer_Students Trainer_Students[]
  Exercises        Exercises[]
  Workouts         Workouts[]
  Workout_Tracker  Workout_Tracker[]
}

model Students {
  student_id        String              @id @default(uuid())
  userId            Users               @relation(fields: [user_id], references: [id])
  user_id           String              @unique
  Trainer_Students  Trainer_Students[]
  Workout_Tracker   Workout_Tracker[]
  Workouts_Students Workouts_Students[]
}

model Trainer_Students {
  id         String   @id @default(uuid())
  trainerId  Trainers @relation(fields: [trainer_id], references: [trainer_id])
  studentId  Students @relation(fields: [student_id], references: [student_id])
  trainer_id String
  student_id String
  created_at DateTime @default(now())

  @@map("trainerxstudent")
}

model Exercises {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(60)
  description       String              @db.VarChar(500)
  trainerId         Trainers            @relation(fields: [trainer_id], references: [trainer_id])
  video_url         String              @db.VarChar(255)
  trainer_id        String
  created_at        DateTime            @default(now()) @db.Timestamptz()
  updated_at        DateTime            @default(now()) @updatedAt @db.Timestamptz()
  Workout_Exercices Workout_Exercices[]
}

model Workouts {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(60)
  description       String              @db.VarChar(500)
  logo_url          String              @db.VarChar(255)
  trainerId         Trainers            @relation(fields: [trainer_id], references: [trainer_id])
  trainer_id        String
  created_at        DateTime            @default(now()) @db.Timestamptz()
  updated_at        DateTime            @default(now()) @updatedAt @db.Timestamptz()
  Workout_Exercices Workout_Exercices[]
  Workouts_Students Workouts_Students[]

  @@unique([trainer_id, name])
}

model Workouts_Students {
  id         Int      @id @default(autoincrement())
  workout_id Int
  student_id String
  schedule   Int[]
  Workout    Workouts @relation(fields: [workout_id], references: [id])
  Student    Students @relation(fields: [student_id], references: [student_id])

  @@unique([workout_id, student_id])
}

model Workout_Exercices {
  id          Int       @id @default(autoincrement())
  workoutId   Workouts  @relation(fields: [workout_id], references: [id])
  exercideId  Exercises @relation(fields: [exercise_id], references: [id])
  exercise_id Int
  workout_id  Int

  @@map("workoutxexercise")
}

model Workout_Tracker {
  id            Int            @id @default(autoincrement())
  status        Workout_Status @default(SCHEDULED)
  tired_level   Int?
  feedback      String?        @db.VarChar(200)
  time_started  DateTime?      @db.Timestamptz()
  time_finished DateTime?      @db.Timestamptz()
  trainerId     Trainers       @relation(fields: [trainer_id], references: [trainer_id])
  studentId     Students       @relation(fields: [student_id], references: [student_id])
  trainer_id    String
  student_id    String
}

enum Workout_Status {
  SCHEDULED
  PROCESSING
  DONE
}
